// Stack implementation using linked list in c++
#include <bits/stdc++.h>
using namespace std;

struct NodeImplementation
{
	int datavalue;
	NodeImplementation* linklist;
};

NodeImplementation* topnode;

void PushIntoLinkedList(int datavalue)
{
	NodeImplementation* tempnode = new NodeImplementation();

	if (!tempnode)
	{
		cout << "\nStack is Overflow";
		exit(1);
	}

	tempnode->datavalue = datavalue;

	tempnode->linklist = topnode;

	topnode = tempnode;
}

int isEmptyStack()
{

	return topnode == NULL;
}

int PeekStack()
{
	
	if (!isEmptyStack())
		return topnode->datavalue;
	else
		exit(1);
}

void PopFromStack()
{
	NodeImplementation* tempnode;

	if (topnode == NULL)
	{
		cout << "\nStack is Underflow" << endl;
		exit(1);
	}
	else
	{
		
		tempnode = topnode;

		topnode = topnode->linklist;

		free(tempnode);
	}
}

void displayStack()
{
	NodeImplementation* tempnode;

	if (topnode == NULL)
	{
		cout << "\nStack is Underflow";
		exit(1);
	}
	else
	{
		tempnode = topnode;
		while (tempnode != NULL)
		{

			cout << tempnode->datavalue << "-> ";

			tempnode = tempnode->linklist;
		}
	}
}

int main()
{
	
	PushIntoLinkedList(45);
	PushIntoLinkedList(90);
	PushIntoLinkedList(117);
	PushIntoLinkedList(96);
	PushIntoLinkedList(29);
	PushIntoLinkedList(56);
	PushIntoLinkedList(49);
	PushIntoLinkedList(30);
	PushIntoLinkedList(1);
	
	displayStack();

	cout << "\nTop element in List is "
		<< PeekStack() << endl;

	PopFromStack();
	PopFromStack();

	displayStack();

	cout << "\nTop element in List is "
		<< PeekStack() << endl;
		
	return 0;
}

