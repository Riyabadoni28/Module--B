// A union-find algorithm to detect cycle in a graph Program in C++
#include <bits/stdc++.h>
using namespace std;

class EdgeImplementationForGraph
{
public:
	int source, destination;
};

class GraphImplementation
{
public:
	int number_of_vertices, number_of_edges;

	EdgeImplementationForGraph* edges;
};

GraphImplementation* createGraph(int number_of_vertices, int number_of_edges)
{
	GraphImplementation* graphimplementaion = new GraphImplementation();
	graphimplementaion->number_of_vertices = number_of_vertices;
	graphimplementaion->number_of_edges = number_of_edges;

	graphimplementaion->edges = new EdgeImplementationForGraph[graphimplementaion->number_of_edges * sizeof(EdgeImplementationForGraph)];

	return graphimplementaion;
}

int findNextNode(int parentNode[], int i)
{
	if (parentNode[i] == -1)
		return i;
	return findNextNode(parentNode, parentNode[i]);
}

void UnionOfTwoSubnode(int parentNode[], int i, int j)
{
	parentNode[i] = j;
}


int isCyclePresent(GraphImplementation* graphimplementaion)
{
	int* parentNode = new int[graphimplementaion->number_of_vertices * sizeof(int)];

	memset(parentNode, -1, sizeof(int) * graphimplementaion->number_of_vertices);

	// Iterate through all edges of graph, find subset of
	// both vertices of every edge, if both subsets are
	// same, then there is cycle in graph.
	for (int i = 0; i < graphimplementaion->number_of_edges; ++i) {
		int x = findNextNode(parentNode, graphimplementaion->edges[i].source);
		int y = findNextNode(parentNode, graphimplementaion->edges[i].destination);

		if (x == y)
			return 1;

		UnionOfTwoSubnode(parentNode, x, y);
	}
	return 0;
}

// Driver code
int main()
{
	/* Let us create the following graph
		0
		| \
		| \
		1---2 */
	int number_of_vertices = 3, E = 3;
	GraphImplementation* graphimplementaion = createGraph(number_of_vertices, E);

	graphimplementaion->edges[0].source = 0;
	graphimplementaion->edges[0].destination = 1;

	graphimplementaion->edges[1].source = 1;
	graphimplementaion->edges[1].destination = 2;

	graphimplementaion->edges[2].source = 0;
	graphimplementaion->edges[2].destination = 2;

	if (isCyclePresent(graphimplementaion))
		cout << "graph contains cycle";
	else
		cout << "graph doesn't contain cycle";

	return 0;
}

