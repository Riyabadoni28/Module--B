<script>
	

// Bellman-Ford Algorithm in JavaScript

function BellmanFordAlgorithmImplementation(graphImplementation, Vertex, Edge, source)
{
	var distination = Array(Vertex).fill(1000000000);

	distination[source] = 0;

	for (var m = 0; m < Vertex - 1; m++)
	{
		for (var n = 0; n < Edge; n++)
		{
			if ((distination[graphImplementation[n][0]] + graphImplementation[n][2]) < distination[graphImplementation[n][1]])
				distination[graphImplementation[n][1]] = distination[graphImplementation[n][0]] + graphImplementation[n][2];
		}
	}
	for (var m = 0; m < Edge; m++)
	{
		var i = graphImplementation[m][0];
		var j = graphImplementation[m][1];
		var weightValue = graphImplementation[m][2];
		if ((distination[i] != 1000000000) &&
				(distination[i] + weightValue < distination[j]))
			document.write("These Graph contains negative" +
										" weight cycles");
	}

	document.write("Vertex Distance from Source to Destination<br>");
	for (var m = 0; m < Vertex; m++)
		document.write(m + "       " + distination[m]);
}

var Vertex = 5;
var Edge = 8;

var graphImplementation = [[ 0, 2, -1 ], [ 0, 3, 5 ],
				[ 1, 3, 4 ], [ 2, 4, 3 ],
				[ 1, 5, 23 ], [ 4, 3, 5 ],
				[ 3, 1, 1 ], [ 4, 2, -3 ]];
BellmanFordAlgorithmImplementation(graphImplementation, Vertex, Edge, 0);


</script>
