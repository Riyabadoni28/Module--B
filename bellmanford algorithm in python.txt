# Bellman-Ford Algorithm Implementation in Python

class GraphImplementation:

	def __init__(self, vertixes):
		self.Vertex = vertixes 
		self.graphImplementation = []

	def addEdgeForNextNode(self, x, y, z):
		self.graphImplementation.append([x, y, z])
		
	def printArrayElements(self, distlist):
		print("Vertexs Distance from Source to Destination")
		for m in range(self.Vertex):
			print("{0}\t\t{1}".format(m, distlist[m]))
	
	def BellmanFordAlgorithmImplementation(self, source):

		distlist = [float("Inf")] * self.Vertex
		distlist[source] = 0

		for _ in range(self.Vertex - 1):
			for x, y, z in self.graphImplementation:
				if distlist[x] != float("Inf") and distlist[x] + z < distlist[y]:
						distlist[y] = distlist[x] + z

		for x, y, z in self.graphImplementation:
				if distlist[x] != float("Inf") and distlist[x] + z < distlist[y]:
						print("These Graph contains negative weight cycles")
						return
						
		self.printArrayElements(distlist)

graph = GraphImplementation(5)
graph.addEdgeForNextNode(0, 2, -1)
graph.addEdgeForNextNode(0, 3, 5)
graph.addEdgeForNextNode(1, 3, 4)
graph.addEdgeForNextNode(1, 4, 3)
graph.addEdgeForNextNode(1, 5, 3)
graph.addEdgeForNextNode(3, 3, 6)
graph.addEdgeForNextNode(3, 2, 1)
graph.addEdgeForNextNode(4, 4, -3)

graph.BellmanFordAlgorithmImplementation(0)

